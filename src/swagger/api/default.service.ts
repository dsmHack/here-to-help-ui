/**
 * Here to Help
 * This is a restful web service used to log hours for non-profits to submit for money grants.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CheckIn } from '../model/checkIn';
import { Organization } from '../model/organization';
import { Project } from '../model/project';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public organizationsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Organization>>;
    public organizationsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Organization>>>;
    public organizationsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Organization>>>;
    public organizationsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = ['*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        headers = headers.set("Content-Type","application/json;charset=UTF-8");
      headers = headers.set("x-application-context","application");
        headers = headers.set("Accept","application/json");
        headers = headers.set("Access-Control-Allow-Origin", "*");
        // to determine the Content-Type header
        let consumes: string[] = ['application/json'
        ];

        return this.httpClient.get<Array<Organization>>(`${this.basePath}/organizations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param organizationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public organizationsOrganizationIdGet(organizationId: string, observe?: 'body', reportProgress?: boolean): Observable<Organization>;
    public organizationsOrganizationIdGet(organizationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organization>>;
    public organizationsOrganizationIdGet(organizationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organization>>;
    public organizationsOrganizationIdGet(organizationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling organizationsOrganizationIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Organization>(`${this.basePath}/organizations/${encodeURIComponent(String(organizationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Project>>;
    public projectsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Project>>>;
    public projectsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Project>>>;
    public projectsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Project>>(`${this.basePath}/projects`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param projectId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectsProjectIdCheckInsGet(projectId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CheckIn>>;
    public projectsProjectIdCheckInsGet(projectId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CheckIn>>>;
    public projectsProjectIdCheckInsGet(projectId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CheckIn>>>;
    public projectsProjectIdCheckInsGet(projectId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling projectsProjectIdCheckInsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<CheckIn>>(`${this.basePath}/projects/${encodeURIComponent(String(projectId))}/check-ins`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param projectId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectsProjectIdGet(projectId: string, observe?: 'body', reportProgress?: boolean): Observable<Project>;
    public projectsProjectIdGet(projectId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Project>>;
    public projectsProjectIdGet(projectId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Project>>;
    public projectsProjectIdGet(projectId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling projectsProjectIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Project>(`${this.basePath}/projects/${encodeURIComponent(String(projectId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param projectId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectsProjectIdUsersGet(projectId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public projectsProjectIdUsersGet(projectId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public projectsProjectIdUsersGet(projectId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public projectsProjectIdUsersGet(projectId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling projectsProjectIdUsersGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/projects/${encodeURIComponent(String(projectId))}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
